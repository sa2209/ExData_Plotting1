plot(cars, sub= "My Plot Subtitle")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch =2)
data(mtcars)
?boxplot()
?boxplot
boxplot()
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
source("ProgrammingAssignment3.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirk
swirl
library(swirl)
rm(list=ls())
swirl()
bye
swirl()
library(swirl)
swirl()
bye
exit
library(swirl)
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5 :20
-(5:20)
select(cran, -(x:size))
select(cran, x:size)
select(cran)
select(cran, -(x:size))
next
help
info()
skip()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran,country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(3, 5, NA, 10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na())
filetr
filter(cran)
filter(cran, !is.na(r_version))
cran <- cran.select()
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id:size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb= size_mb/2^10)
mutate(cran3, correct_size= size-1000)
mutate(cran3, correct_size= size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran
cran <- tbl_df(mydf)
rm("mydf")
bye
exit
exit()
info()
bye()
swirl()
library(swirl)
swirl()
cran
?group_by()
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
submit()
skip()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<- filter(pack_sum)
top_counts<- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
arrange(top_counts, count)
top_counts_sorted <-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, )
top_unique <- filter(pack_sum)
top_unique <- filter(pack_sum, unique>465)
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
skip()
skip()
submit()
skip()
skip()
library(tidyr)
students
?gather
gather(students, sex,count, -grade)
students2
res <- gather()
res <- gather(students2)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class)
separate(res, sex_class, c("sex", "class"))
skip()
students3
skip()
?spread
skip()
library(readr)
parse_number("class5")
skip()
students4
skip()
skip()
skip()
passed
failed
skip()
skip()
packageVersion('dplyr')
bind_rows()
bind_rows(passed, failed)
sat
skip()
skip()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubricade)
help(package = lubridate)
today()
this_day<- today()
this_day
year(this_day)
wday(this_day)
bye
bye()
exit()
library("swirl")
swirl()
skip()
this_moment<- now()
this_moment
hour(this_moment)
my_date<- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd(1989 May 17)
ymd("March 12 1975")
mdy("March 12 1975")
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours=0, minutes=5)
this_moment
skip()
nyc
skip()
depart
skip()
depart
skip()
?with_tz
skip()
skip()
skip()
last_time
skip()
skip()
as.period(how_long)
stopwatch()
getwd
getwd()
submit()
newData<-newData[order(newData$subject,newData$activity),]
write.table(newData, file = "tidydata.txt",row.name=FALSE,quote = FALSE, sep = '\t')
if(!file.exists("./Dataset")){
dir.create("./Dataset") }
if(!file.exists("./Dataset")){
dir.create("./Dataset") }
link <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists("./Dataset/project_dataset.zip")){
download.file(Url,destfile="./Dataset/project_dataset.zip",mode = "wb")  }
if(!file.exists("./Dataset/project_dataset.zip")){
download.file(link, destfile="./Dataset/project_dataset.zip",mode = "wb")  }
if(!file.exists("./Dataset/UCI HAR Dataset")){
unzip(zipfile="./Dataset/project_dataset.zip",exdir="./projectData")  }
if(!file.exists("./Dataset/UCI HAR Dataset")){
unzip(zipfile="./Dataset/project_dataset.zip",exdir="./Dataset/projectData")  }
path <- file.path("./Dataset" , "UCI HAR Dataset")
files<-list.files(path, recursive=TRUE)
files
path <- file.path("./Dataset/projectData" , "UCI HAR Dataset")
files<-list.files(path, recursive=TRUE)
files
ActivityTest  <- read.table(file.path(path, "test" , "Y_test.txt" ),header = FALSE)
ActivityTrain <- read.table(file.path(path, "train", "Y_train.txt"),header = FALSE)
ActivityTest
SubjectTrain <- read.table(file.path(path, "train", "subject_train.txt"),header = FALSE)
SubjectTest  <- read.table(file.path(path, "test" , "subject_test.txt"),header = FALSE)
FeaturesTest  <- read.table(file.path(path, "test" , "X_test.txt" ),header = FALSE)
FeaturesTrain <- read.table(file.path(path, "train", "X_train.txt"),header = FALSE)
dataSubject <- rbind(SubjectTrain, SubjectTest)
dataActivity<- rbind(ActivityTrain, ActivityTest)
dataFeatures<- rbind(FeaturesTrain, FeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
activityLabels <- read.table(file.path(path, "activity_labels.txt"),header = FALSE)
Data$activity<-factor(Data$activity,labels=activityLabels[,2])
head(Data$activity,30)
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
newData<-aggregate(. ~subject + activity, Data, mean)
newData<-newData[order(newData$subject,newData$activity),]
write.table(newData, file = "tidydata.txt",row.name=FALSE,quote = FALSE, sep = '\t')
str(ActivityTest)
newData<-aggregate(. ~subject + activity, Data, mean)
path <- file.path("./Dataset/projectData" , "UCI HAR Dataset")
files<-list.files(path, recursive=TRUE)
files
ActivityTest  <- read.table(file.path(path, "test" , "Y_test.txt" ),header = FALSE)
ActivityTrain <- read.table(file.path(path, "train", "Y_train.txt"),header = FALSE)
SubjectTrain <- read.table(file.path(path, "train", "subject_train.txt"),header = FALSE)
SubjectTest  <- read.table(file.path(path, "test" , "subject_test.txt"),header = FALSE)
FeaturesTest  <- read.table(file.path(path, "test" , "X_test.txt" ),header = FALSE)
FeaturesTrain <- read.table(file.path(path, "train", "X_train.txt"),header = FALSE)
dataSubject <- rbind(SubjectTrain, SubjectTest)
dataActivity<- rbind(ActivityTrain, ActivityTest)
dataFeatures<- rbind(FeaturesTrain, FeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
activityLabels <- read.table(file.path(path, "activity_labels.txt"),header = FALSE)
Data$activity<-factor(Data$activity,labels=activityLabels[,2])
head(Data$activity,30)
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
newData<-aggregate(. ~subject + activity, Data, mean)
newData<-newData[order(newData$subject,newData$activity),]
write.table(newData, file = "tidydata.txt",row.name=FALSE,quote = FALSE, sep = '\t')
submit("run_analysis.R")
## R Script for Getting and Cleaning Data Course Project
## Download and unzip the dataset
if(!file.exists("./Dataset")){
dir.create("./Dataset") }
link <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists("./Dataset/project_dataset.zip")){
download.file(link, destfile="./Dataset/project_dataset.zip",mode = "wb")  }
if(!file.exists("./Dataset/UCI HAR Dataset")){
unzip(zipfile="./Dataset/project_dataset.zip",exdir="./Dataset/projectData")  }
path <- file.path("./Dataset/projectData" , "UCI HAR Dataset")
files<-list.files(path, recursive=TRUE)
##Read data from the files into the variables
##Read activity files
ActivityTest  <- read.table(file.path(path, "test" , "Y_test.txt" ),header = FALSE)
ActivityTrain <- read.table(file.path(path, "train", "Y_train.txt"),header = FALSE)
##Read the subject files
SubjectTrain <- read.table(file.path(path, "train", "subject_train.txt"),header = FALSE)
SubjectTest  <- read.table(file.path(path, "test" , "subject_test.txt"),header = FALSE)
##Read features files
FeaturesTest  <- read.table(file.path(path, "test" , "X_test.txt" ),header = FALSE)
FeaturesTrain <- read.table(file.path(path, "train", "X_train.txt"),header = FALSE)
## Concatenate the data tables
dataSubject <- rbind(SubjectTrain, SubjectTest)
dataActivity<- rbind(ActivityTrain, ActivityTest)
dataFeatures<- rbind(FeaturesTrain, FeaturesTest)
## Set names to variables
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
##Merge columnsto get data frame for all data
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
##Extracts only the measurements on the mean and standard deviation for each measurement.
##Subset Name of Features by measurements on the mean and standard deviation
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
##Subset Name of Features by measurements on the mean and standard deviation
##Read descriptive activity names from "activity_labels.txt"
activityLabels <- read.table(file.path(path, "activity_labels.txt"),header = FALSE)
##Factorize varibale activity in the data frame Data using descriptive activity names
Data$activity<-factor(Data$activity,labels=activityLabels[,2])
head(Data$activity,30)
##Appropriately labels the data set with descriptive variable names
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
##Creates an independent tidy data set
newData<-aggregate(. ~subject + activity, Data, mean)
newData<-newData[order(newData$subject,newData$activity),]
write.table(newData, file = "tidydata.txt",row.name=FALSE,quote = FALSE, sep = '\t')
exit
bye
library("swirl")
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
library(swirl)
swirl()
swirl()
library(ggplot2)
version
install.package('ggplot2', dep = TRUE)
library("swirl")
swirl()
helo
help
?help
install.packages("ggplot")
install.packages("ggplot2")
swirl()
library("swirl")
swirl()
library("swirl")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col=blue)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
table(region)
reg<= table(pollution$region)
reg<- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Countries in Each Region")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(y~x)
boxplot(pollution, y~x)
boxplot(pollution, pm25~region)
boxplot(pm25~region, pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east<-subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
west<-subset(pollution, region=="west")
hist(subset(pollution,region=="west")$pm25, col="green")
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(12, lwd=2, lty=2)
abline(v=12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col="pollution$region")
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar=c(5,4,2,1)
)
next
skip
next()
west<-subset(pollution, region=="west")
plot(west$latitude~west$pm25, main="West")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="east")
plot(east$latitude, east$pm25, main="East")
?Devices
plot(eruptions, waiting)
plot(eruptions, waiting)
plot(dataset, faithful)
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.copy(png)
dev.copy(png, file = "geyserplot.png")
dev.off()
library("swirl")
swirl()
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot2(displ, hwy, data=mpg)
ggplot2
setwd("C:/Users/Sachin Awasthi/ExData_Plotting1")
getwd()
data_set <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data1 <- subset(data_set, Date %in% c("1/2/2007","2/2/2007"))
data1$Date <- as.Date(data1$Date, format="%d/%m/%Y")
hist(data1$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
png("plot1.png", width=480, height=480)
dev.off()
data_set <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data1 <- subset(data_set, Date %in% c("1/2/2007","2/2/2007"))
data1$Date <- as.Date(data1$Date, format="%d/%m/%Y")
hist(data1$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
png("plot1.png", width=480, height=480)
dev.off()
getwd()
